package kr.co.tjoeun.config;

import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.ServletRegistration;

import org.springframework.web.WebApplicationInitializer;
import org.springframework.web.context.support.AnnotationConfigWebApplicationContext;
import org.springframework.web.servlet.DispatcherServlet;

//프로젝트 실행시 자동으로 호출됨
public class SpringConfigClass implements WebApplicationInitializer {

	@Override
	public void onStartup(ServletContext servletContext) throws ServletException {
		//System.out.println("onStartup() 메소드 - 프로젝트 시작시 자동으로 호출됨 ");
		/*
     <servlet-mapping>
        <servlet-name>appServlet</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>
	 
	<!-- 110번째 줄 -->
	<!-- 요청 정보를 분석하여 Controller 를 선택하는 Servlet 지정하기 -->
	<servlet>
        <servlet-name>appServlet</servlet-name>
        <!-- Spring MVC 에서 제공하는 기본 Servlet 지정하기 -->
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!-- Spring MVC 설정을 위한 xml 파일 지정하기 -->
        
        이것을 자바식으로 설정하면 즉 servlet_context.xml이랑 root_context.xml을 설정해줄것임
        ser_con은 serappcontext.java 참고
		*/
		
		// Spring MVC project 에 관련된 설정을 하는 클래스(ServletAppContext)의 객체 생성하기
		AnnotationConfigWebApplicationContext servletAppContext = new AnnotationConfigWebApplicationContext();
		servletAppContext.register(ServletAppContext.class); //이 서블릿앱콘텍스트 클래스의 정보를 갖고있는 객체를 생성함
		
		//요청 발생시 요청을 처리하는 Servlet을 
		//org.springframework.web.servlet 으로 지정함
		DispatcherServlet dispatcherServlet = new DispatcherServlet(servletAppContext);
		
		//서블릿 레지스트레이션의 내부클래스인 다이나믹클래스
		ServletRegistration.Dynamic servlet = 
	}

	
}
