package kr.co.tjoeun.config;

import javax.servlet.FilterRegistration;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.ServletRegistration;

import org.springframework.web.WebApplicationInitializer;
import org.springframework.web.context.ContextLoaderListener;
import org.springframework.web.context.support.AnnotationConfigWebApplicationContext;
import org.springframework.web.filter.CharacterEncodingFilter;
import org.springframework.web.servlet.DispatcherServlet;

//프로젝트 실행시 자동으로 호출됨
//web.xml의 역할
public class SpringConfigClass implements WebApplicationInitializer {

	@Override
	public void onStartup(ServletContext servletContext) throws ServletException {
		//System.out.println("onStartup() 메소드 - 프로젝트 시작시 자동으로 호출됨 ");
		/*
		  	web.xml을 자바방식으로 설정할것임 
        이것을 자바식으로 설정하면 즉 servlet_context.xml이랑 root_context.xml을 설정해줄것임
        ser_con은 serappcontext.java 참고
		*/
		
		// Spring MVC project 에 관련된 설정을 하는 클래스(ServletAppContext)의 객체 생성하기
		AnnotationConfigWebApplicationContext servletAppContext = new AnnotationConfigWebApplicationContext();
		servletAppContext.register(ServletAppContext.class); //이 서블릿앱콘텍스트 클래스의 정보를 갖고있는 객체를 생성함
		
		//요청 발생시 요청을 처리하는 Servlet을 
		//org.springframework.web.servlet 으로 지정함
		DispatcherServlet dispatcherServlet = new DispatcherServlet(servletAppContext);
		
		//서블릿 레지스트레이션의 내부클래스인 다이나믹클래스
		//onStartup(ServletContext servletContext) 여기의 서블릿콘텍스트의 파라미터인 서블릿콘텍스트에 add해주는것
		ServletRegistration.Dynamic servlet = servletContext.addServlet("dispatcherServlet", dispatcherServlet);
		
		
		// xml방식에서 <load-on-startup>1</~~> 설정부분
		servlet.setLoadOnStartup(1);
		
		/*
		      xml방식에서   <servlet-name>appServlet</servlet-name>
        				<url-pattern>/</url-pattern> 설정부분
		*/
		servlet.addMapping("/");
		
		//bean을 지정하는 클래스가 어떤클래스인지
		//Bean을 정의하는 클래스 지정하기 : RootAppContext
		AnnotationConfigWebApplicationContext rootAppContext = new AnnotationConfigWebApplicationContext();
		rootAppContext.register(RootAppContext.class); //이 서블릿앱콘텍스트 클래스의 정보를 갖고있는 객체를 생성함
		
		//리스너 설정하기
		ContextLoaderListener listener = new ContextLoaderListener(rootAppContext); //()를 아규먼트라 한다
		servletContext.addListener(listener);
		
		//파라미터 인코딩 필터 설정
		
		FilterRegistration.Dynamic filter = servletContext.addFilter("encodingFilter", CharacterEncodingFilter.class);
		
	}

	
}
