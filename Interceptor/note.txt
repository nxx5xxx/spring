
# 인터셉터
## Interceptor
	
	AOP - Aspect Oriented Programming
		     관심(관점)	지향		프로그래밍
	------------------>
	ㅁ공통코드ㅁ공통코드ㅁ공통코드ㅁ
	이때 이 공통코드를 중복제거하여 썻던코드를 재활용
	이때 어느시점에 코드가 들어갔느냐가 관점지향프로그래밍
	
	
	interceptor는 요청 주소(request : URL(lotation) / URI(idenfired) uri가 더 넓은개념)
	에 대해 관심을 갖고 요청이 발생하게 되면 요청 주소를 확인하여 Controller의 메소드를 호출하기 전 이나 후에
	다른 메소드를 호출할 수 있도록 가로채가는 것 (AOP가 포함된 개념이라 생각하면 됨)
	
	요청 발생시 호출되는 메소드의 중복되는 부분이 있는 경우,
	interceptor 를 사용해서 처리한다
	
	로그인 여부 확인, 회원 등급별 사용권한 확인 등의
	작업을 처리 할 때 주로 사용한다
	
## Interceptor 구현하기

	interceptor는 HandlerInterceptor 인터페이스를 구현(implements)하거나
	HandlerInterceptorAdapter 클래스를 상속(extends)받은 클래스를
	작성한 후 상속받은 메소드를 overriding 하여 작성한다
	
### preHandle() 메소드
		Controller의 메소드가 호출되기 전에 자동으로 호출되는 메소드
		이 메소드가 false를 반환하면 code의 흐름이 중단된다
		
###	postHandle() 메소드
		Controller의 메소드의 수행이 완료되고
		View 처리를 수행하기 전에 자동으로 호출되는 메소드
		
###	afterCompletion() 메소드
		View 처리까지 완료되고 응답결과(response)가
		Client의 browser로 전달되기 전에 자동으로 호출되는 메소드	
	
### 사용예시

	package kr.co.tjoeun.interceptor;
	
	import javax.servlet.http.HttpServletRequest;
	import javax.servlet.http.HttpServletResponse;
	
	import org.springframework.web.servlet.HandlerInterceptor;
	import org.springframework.web.servlet.ModelAndView;
	
	public class TestInterceptor1 implements HandlerInterceptor{
	
		@Override
		public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)
				throws Exception {
			System.out.println("TestInterceptor1 - preHandle");
			return true;//HandlerInterceptor.super.preHandle(request, response, handler);
		}
	
		@Override
		public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,
				ModelAndView modelAndView) throws Exception {
			System.out.println("TestInterceptor1 - postHandle");
			//HandlerInterceptor.super.postHandle(request, response, handler, modelAndView);
		}
	
		@Override
		public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)
				throws Exception {
			System.out.println("TestInterceptor1 - afterCompletion");
			//HandlerInterceptor.super.afterCompletion(request, response, handler, ex);
		}
		
			
	
	}
	
# JAVA방식
		
## Interceptor 등록하기
	ㄴ ServletAppContext 클래스의 addInterceptor() 메소드에 등록한다 -(default메소드)
	
### 등록예시
	
	//interceptor를 등록하는 메소드
	@Override
	public void addInterceptors(InterceptorRegistry registry) {
		WebMvcConfigurer.super.addInterceptors(registry);
		//System.out.println("addInterceptor시작");
		//서버가 켜질때 시작함
		TestInterceptor1 inter1 = new TestInterceptor1();
		InterceptorRegistration reg1 = registry.addInterceptor(inter1);
		
		// InterceptorRegistration 클래스의 addPathPatterns 메소드의 argutent로 url pattern을 지정한다
		
		reg1.addPathPatterns("/test1");
		//즉 /test1이 찍히면 이것을 동작 시키기 전(View가 나오기 전 )에 TestInterceptor클래스를 먼저 동작시킨다는것
		//그러면 TestInterceptor에 설정한 시점에 따라 코드가 실행된다
		
		TestInterceptor2 inter2 = new TestInterceptor2();
		InterceptorRegistration reg2 = registry.addInterceptor(inter2);
		reg2.addPathPatterns("/test1");
		//preHandle에서는 순서대로 실행되지만
		// post및 after에서는 순서가 뒤에서부터 실행된다
		
		TestInterceptor3 inter3 = new TestInterceptor3();
		InterceptorRegistration reg3 = registry.addInterceptor(inter3);
		reg3.addPathPatterns("/test2");
		
		TestInterceptor4 inter4 = new TestInterceptor4();
		InterceptorRegistration reg4 = registry.addInterceptor(inter4);
		//		reg4.addPathPatterns("/test1");
		//		reg4.addPathPatterns("/test2");
		//하나로 묶는법 , 한개로 두개를 지정하기		
		reg4.addPathPatterns("/test1","/test2");
		
		TestInterceptor5 inter5 = new TestInterceptor5();
		InterceptorRegistration reg5 = registry.addInterceptor(inter5);
		//		폴더내에 있는것에 인터셉터하기
		reg5.addPathPatterns("/sub1/test3", "/sub1/test4");
		
		
	}
	
	
## pattern - 와일드카드문자
	
	* : 이름 하나만을 의미함. 글자수, 글자등에 제한이 없음
	? : 글자 하나만
	** : 하위 이름까지 포함 하고 글자수, 글자 등에 제한이 없음
	
## pattern 등록

	addPathPatterns[java방식] , <mapping>[xml방식] : interceptor가 가로채는 (url)주소를 등록한다
	
	excludePathPatterns, <exclude-mapping> : interceptor가 가로채지 않을 (url)주소를 등록한다
		즉, 해당 패턴이 등록되어있는것은 인터셉터가 동작하지 않는다는것  	
	
### 사용예시

	// 와일드카드문자 사용 ( pattern )
	
	TestInterceptor6 inter6 = new TestInterceptor6();
	InterceptorRegistration reg6 = registry.addInterceptor(inter6);
	// 와일드카드문자
	// 그 다음  ' / ' 전 까지만 동작
	//만일 동작시키고 싶다면 reg6.addPathPatterns("/**"); 이렇게 쓰면 된다 
	reg6.addPathPatterns("/*");
	
	
	TestInterceptor7 inter7 = new TestInterceptor7();
	InterceptorRegistration reg7 = registry.addInterceptor(inter7);
	// 패턴을 나누는 기준이 ' / ' 임을 알 수 있다
	reg7.addPathPatterns("/sub1/*");
	
	TestInterceptor8 inter8 = new TestInterceptor8();
	InterceptorRegistration reg8 = registry.addInterceptor(inter8);
	// inter6에서설명한것
	reg8.addPathPatterns("/**");
	
	
	// excludePathPatterns
	// 다음 '/' 나오기 전까지를 다 제외시켜버림

---

# XML방식
## Interceptor 등록하기
		ㄴservlet-context.xml에 bean과 interceptor를 등록한다
		
	   		 <!-- interceptors 들을 Bean 으로 등록하기 -->
	 <beans:bean class="kr.co.tjoeun.interceptor.TestInterceptor1" id="inter1" />
   		 
	 <interceptors>
	 	<!-- 한개등록 -->
	 	<interceptor>
	 		<mapping path="/test1" />
	 		<beans:ref bean="inter1"/>
	 	</interceptor>
	 	<!-- 빈을 따로 선언하지않고 바로 등록 -->
	 	<interceptor>
	 		<mapping path="/test2" />
	 		<beans:bean class="kr.co.tjoeun.interceptor.TestInterceptor2" />
	 	</interceptor>
	 	<!-- url한곳에 두개를 넣음 -->
	 	<interceptor>
	 		<mapping path="/test2" />
	 		<beans:ref bean="inter1"/>
	 	</interceptor>
	 	<!-- 와일드카드 사용 -->
	 	<interceptor>
	 		<mapping path="/**" />
	 		<beans:bean class="kr.co.tjoeun.interceptor.TestInterceptor3" />
	 	</interceptor>
	 	<!-- exclude-mapping 사용 -->
	 	<interceptor>
	 		<mapping path="/**" />
	 		<exclude-mapping path="/*"/>
	 		<beans:bean class="kr.co.tjoeun.interceptor.TestInterceptor4" />
	 	</interceptor>
	 </interceptors>
	 
---
---