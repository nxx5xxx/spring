ViewResolver
	ㄴ Controller에서 전달받은 View의 이름을 기반으로 (return 에서 받은 문자열을 의미 {ex:return "result" 에서 result})
	jsp파일을 찾아 선택하고 jsp 데이터를 분석해 응결과를 만들어 전달한다
		-response를 받아 response를 받은 데이터를 브라우저가 해석하여 우리 눈에 보여주는것임
	
	ViewResolver 가 사용하는 View의 이름을 지정하는 방법
	jsp를 통해 응답결과를 만들 때 필요한 data를 전달하는 방법
	
	
HttpServletRequest
	ㄴSpring MVC가 jsp를 처리할 때 (SpringMVC는 SpringFramework를 뜻함)
	 HttpServletRequest 객체를(자동으로 생성하여) jsp로 전달한다
	ㄴViewResolver 는 이러한 과정을 이용하여 jsp 작업시 data 를 사용한다
	
	
	
	1) 웹브라우저 주소표시줄에 /test1이 표시되면 < 요청 정보라 함 (request
	2) DispatcherServlet 이  요청정보를 받아 분석해 Controller를 선택한다
	3) @GetMapping("/test1") 이 있는 메소드를 호출하고
	4) 이 메소드의 return값으로 지정된 이름의 jsp파일(View)을 선택한다
	5) 이 정보를 ViewResolver가 받아 해당 jsp 파일을 분석하여
	6) 해당 jsp 파일에 있는 java code나 , EL , JSTL등을 모두 실행시킨다
	7) 이 결과를 다시 DispatcherServlet으로 전달해
	8) 여기서 생성된 정보(html) 를 Client 로 보내면 (response
	9) Client의 web browser가 이를 rendering하여 화면으로 보여준다
	
컨트롤러를 거치지않고 바로 받으려면 ${param.변수명 }

HttpServletRequest 객체를 주입받는 방법
	ㄴ public String test2(HttpServletRequest request)
	request.setAttribute("변수",값)

Model 객체를 주입받는 방법
	ㄴ public String test3(Model model)
		ㄴ Model 객체를 주입 받으면 HttpServletRequest 객체에 담아져서 jsp 에 전달 할 수 있다
		ㄴ model.addAttribute("변수", 값)
		
ModelAndView 객체를 주입받는방법
	ㄴ public ModelAndView test4(ModelAndView mv){ return mv}
		ㄴ ModelAndView 는 Model에 값을 설정하고 View의 이름을 지정까지 할 수 있다
		test3 메소드는 View의 이름을 return 하지 않고 ModelAndView 객체를 return한다
		ㄴ mv.addObject("변수",값)
		 mv.setViewName("View 이름")
		 
ViewResolver 에 의해서 jsp가 실행되고 응답결과가 만들어진다
Controller 에서 View를 지정할 때
ViewResolver가 사용할 data를 Request 영역에 저장한다

Request 영역에 저장한 data를 jsp에서 꺼내 사용할 때
${requestScope.지정한변수명 } 이라는 EL을 사용한다