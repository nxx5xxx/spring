# 0621
	boardProject4
	boardProject4Xml
	
---
<h1 style="color:red;font-weight:bold> 전체적인 흐름 - 제일중요 </h1>

	맵퍼에 db명령어삽입 > DAO에서 맵퍼호출 (mapper.insert~~) ; > 서비스에서 dao호출 > 컨트롤러


## 회원가입
### 유효성검사를 하기 위해 발리데이트를 사용한다

##join.jsp

	form:form modelAttribute="클래스명" (앞글자소문자) method="post" action="~~"
	여기서 modelAttribute는 action값으로 준 메소드에 자동으로 리퀘스트스코프영역을 공유한다
	그 파라미터를 빼오려면 request.getParameter("~"); 또는
	매개변수에 멤버필드가 일치하면 클래스를 넣으면 자동으로 할당된다(세터가 잡힌다)
	
	여기서 말하는 리퀘스트 스코프영역은
	@GetMapping에서 옮겨온
	public String join(@ModelAttribute("joinUserBean") UserBean bean)
	이것
	
	이것에서 가장먼저 joinUserBean이라는 영역이생기고
	form태그 modelAttribute에 의해 joinUserBean에 담긴다
	그것을 @PostMapping에서 다시 갖고오는것
	
## UserBean.java
	Validate
	
	@Size(min=2, max=4)
	@Pattern(regexp="[가-힣]*")
	private String user_name;
	
	@Size(min=4, max=20)
	@Pattern(regexp="[a-zA-Z0-9]*")
	private String user_id;
	
	@Size(min=4, max=20)
	@Pattern(regexp="[a-zA-Z0-9]*")
	private String user_pw;
	
## UserController.java

	@GetMapping("/join")
	public String join(@ModelAttribute("joinUserBean") UserBean joinUserBean) {
		return "user/join";
	}
	
	@PostMapping("/join_procedure")
	public String join_procedure(@Valid  @ModelAttribute("joinUserBean") UserBean bean, BindingResult result) {
		// BindingResult는  발리데이트 결과
		if(result.hasErrors()) {
			//발리데이트(유효성검사) 통과 못할시
			return "user/join";
		}
		
		//System.out.println(bean.getUser_id());
		
		return "user/join_success";
	}
	
## error.properties

	해당에러.리퀘스트받는이름.해당멤버필드 = ~~
	ex)
	Size.joinUserBean.user_name = 이름은 2글자에서 4글자까지 허용합니다

## 프로퍼티스 에러 등록
### ServletAppContext.java

	@Bean
	public static PropertySourcesPlaceholderConfigurer PropertySourcesPlaceholderConfigurer() {
		return new PropertySourcesPlaceholderConfigurer();
	}
	
	
	//에러 메세지를 작성한 properties 파일 등록하기
	@Bean
	public ReloadableResourceBundleMessageSource messageSource() {
		ReloadableResourceBundleMessageSource res = new ReloadableResourceBundleMessageSource();
		res.setBasename("/WEB-INF/properties/error");
		//강사님은 names 에 error.properties
		return res;
	}

## 커스텀 Validator적용하기
### UserValidator.java

	public class UserValidator implements Validator{

	@Override
	public boolean supports(Class<?> clazz) {
		//리버싱 클래스의 정보를 갖고오기
		return UserBean.class.isAssignableFrom(clazz);
	}

	@Override
	public void validate(Object target, Errors errors) {
		UserBean userBean = (UserBean)target;
		
		if(userBean.getUser_pw().equals(userBean.getUser_pw2())==false) {
			//에러호출
			//errors.rejectValue("멤버필드","지정할에러코드")
			//이것을 에러프로퍼티스에서 사용가능하다
			errors.rejectValue("user_pw", "NotEquals");
		}
	}
	
### UserController.java
	맨 하단에
	//커스텀한 발리데이터를 등록하기
	@InitBinder
	public void initBinder(WebDataBinder binder) {
		UserValidator userValidator = new UserValidator();
		binder.addValidators(userValidator);
	}


# 아이디 중복확인
## UserMapper.java 추가
	public interface UserMapper {
	@Select("select user_name from user_table where user_id = ${user_id}")
	String checkUserIdExist(String user_id);
	// ${user_id} 이것때문에 () 안에 집어넣어준것
	
	}
	
## 해당 맵퍼 등록하기 ServletAppContext.java
		
	//UserMapper
	@Bean
	public MapperFactoryBean<UserMapper> getUserMapper(SqlSessionFactory factory) throws Exception{
		MapperFactoryBean<UserMapper> factoryBean = new MapperFactoryBean<UserMapper>(UserMapper.class);
		factoryBean.setSqlSessionFactory(factory);
		return factoryBean;
		
	}
	
## UserService.java 추가

	
	@Service
	public class UserService {
		
		@Autowired
		private UserDAO userDAO;
		
		public String checkUserIdExist(String user_id) {
			String id = userDAO.checkUserIdExist(user_id);
			return id;
		}
	}

## RestfulAPIController.java 추가
	@RestController
	public class RestfulAPIController {
		
		@Autowired
		private UserService userService;
		
		@GetMapping("/user/checkUserIdExist/{user_id}")
		public String checkUserIdExist(@PathVariable String user_id) {
			// UserService 의 checkUserIdExist() 메소드 호출하기
			boolean checkId = userService.checkUserIdExist(user_id);
			return checkId + "";
		}
		
	}

---

# XML방식
## servlet-context.xml
		<!-- error messageㄹㅡㄹ 작성한 properties 파일 등록하기 : Message Source 등록하기 -->

		<beans:bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
			<beans:property name="basenames">
				<beans:list>
					<beans:value>/WEB-INF/properties/error</beans:value>
				</beans:list>
			</beans:property>
		</beans:bean>
		
		<!-- Message에 접근하는 접근자 등록하기 -->
		<beans:bean class="org.springframework.context.support.MessageSourceAccessor">
			<beans:constructor-arg ref="messageSource" />
		</beans:bean>
		
		
## user_mapper.xml
	 <mapper namespace="user">
	 	<select id="checkUserIdExist" parameterType="java.lang.String" resultType="java.lang.String">
	 	<![CDATA[
	 		select user_name from user_table where user_id = #{user_id};
	 	]]>
	 	 	
	 	</select>
	 </mapper>

## UserDAO 수정
	private SqlSessionTemplate sqlSessionTemplate;
	
	public String checkUserIdExist(String user_id) {
		//네임스페이스.네임스페이스내에서사용할문구id
		String user_name = sqlSessionTemplate.selectOne("user.checkUserIdExist",user_id);
		return user_name; 	
		
## Service 땡겨오기

## Controller 땡겨오기
--------------------------


# 자바스크립트
	onkeypress = "" 키를 눌렀을때 함수가 자동으로 동작

	var 를 썻었는데 js6부터 그것이 정해짐
	let - 변수 
	const - 상수
	예 : 
	function checkUserIdExist(){
		alert($("#user_id").val());
		var user_id = $("#user_id").val();
	}
	
# ajax
	Asynchronous JavaScript and XML
	
	function checkUserIdExist(){	
		var user_id = $("#user_id").val();
		
		if(user_id.length == 0){
			//길이가 0이면 입력을 안한경우
			alert('아이디를 입력해주세요');
			//return
		}else{
			$.ajax ({
				url : "${root}user/checkUserIdExist/" + user_id,
				type : "get",
				dataType : "text",
				success : function(result){
					if(result.trim()=="true"){ //trim 은 양옆의 공백을 제거해주는 역할을 한다
						alert("사용할 수 있는 아이디 입니다");
					}else{
						alert("이미 존재하는 아이디 입니다");
					}
				}
				
			});
			
			
		}
	}
	
-------

## UserBean.java 수정

## UserValidator.java 수정

------

# Insert
## UserMapper.java
## UserDAO.java
## UserService.java
## UserController.java

-----

# Login
## UserBean.java
## RootAppContext.java
	UserBean  > 루트앱콘텍스트 > 홈컨트롤러 --진행중