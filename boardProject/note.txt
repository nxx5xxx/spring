
# Bean 정의하기

	@Bean : 클래스의 객체를 생성하여 Bean(스프링이 관리하는 객체) 으로 등록해준다
	
	@Component : 클래스의 객체를 생성하여 Bean 으로 등록해준다
	
	@Controller : Component의 한 종류
				사용자의 요청 (request == url pattern)에 따라서
				자동으로 호출되는 메소드를 가지고 있는 클래스(Controller 역할을 하는 클래스)
				를 Bean으로 등록 return 값으로 지정된 문자열이 view의 이름이 된다
				
	@RestController : @Controller와 흡사하나
						return값에 지정된 문자열이 데이터로 전달된다
						(Client의 browser에 response로 보냄)
						RestfulAPI server 를 구성하는 경우에 주로 사용한다
						
	@ControllerAdvice : 예외가 발생한 경우 사용할 global Exception Handler로 사용할
						클래스를 Bean으로 등록한다
						
	@Service : @Controller 에서 호출하는 메소드가 정의된 Bean을 등록한다
				@Component로 등록한 Bean과 비슷하다
				
	@Repository : @Service에서 호출하는 메소드가 정의된 Bean을 등록한다
					이 Bean은 DataBase와 관련된 작업이 구현되어있다
					
			Controller --> Service --> Repository(DAO)
						<--			<--
						
						
	DEO : DATABASE ACCESS OBJECT 데이터베이스 연결객체
	
## Bean을 정의하기위해

	ServletAppContext에 
	@ComponentScan("경로.controller")
	@ComponentScan("경로.service")
	@ComponentScan("경로.dao")
	를 하였다 dao는 위에보이는 repository가 dao이다
	repository인 이유는 자바를 만든사람이 그렇게 하고싶었기때문
	
## Controller

	@Controller
	public class TestController {
		
		@Autowired
		TestService testService;
		
		@GetMapping("/test1")
		public String test1(Model model) {
			String str1 = testService.testServiceMethod();
			model.addAttribute("str1", str1);
			return "test1";
		}
	}
	
## Service

	@Service
	public class TestService {
		
		//테스트서비스에서 테스트 다오를 사용한다는 의미
		//TestDAO testDAO = new TestDAO();
		//=이걸 간단하게 한게
		@Autowired
		TestDAO testDAO;
		
		public String testServiceMethod() {
			String str1 = testDAO.testDaoMethod();
			return str1;
		}
	}
	
## Repository (DAO)

	@Repository
	public class TestDAO {
	
		public String testDaoMethod() {
			return "강아지";
		}
		
	}

	
	